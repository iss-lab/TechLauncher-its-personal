dataset @com.spotify language "en" {
    // this combination is so common it warrants its own primitive template...
    query (p_song :String, p_artist :Entity(com.spotify:artist)) := @com.spotify.playable(), id =~ p_song && contains(artists, p_artist)
    #_[utterances=["${p_song:no-undefined} by ${p_artist}",
                   "${p_song:no-undefined} from ${p_artist}"]];

    // these ones are hard to get with domain-independent templates
    query (p_artist :Entity(com.spotify:artist)) := sort(popularity desc of @com.spotify.playable(), contains(artists, p_artist))
    #_[utterances=[/*"${p_artist}'s greatest hits",*/
                   "popular music by ${p_artist:no-undefined}"]];
    query (p_artist :Entity(com.spotify:artist)) := sort(release_date desc of @com.spotify.playable(), contains(artists, p_artist))
    #_[utterances=["new ${p_artist:no-undefined}", "new music from ${p_artist:no-undefined}",
                   "${p_artist:no-undefined} by the new first"]];

    program := @com.spotify.play(playable=$?)
    #_[utterances=["play some music on spotify",
                   "open spotify and play some music",
                   "use spotify to play some music"]]
    ;

    action (p_song :Entity(com.spotify:playable)) := @com.spotify.play(playable=p_song)
    #_[utterances=["play ${p_song:no-undefined} on spotify",
                   "play ${p_song:no-undefined}"]]
    ;

    program (p_song :String) := (@com.spotify.playable(), id =~ p_song) => @com.spotify.play(playable=id)
    #_[utterances=["i would like to hear ${p_song:const}",
                   "i would like to listen to ${p_song:const}",
                   "play ${p_song:const} on spotify",
                   "on spotify play ${p_song:const}",
                   "play ${p_song:const}"]]
    ;

    program (p_genre :String) := (@com.spotify.playable(), contains~(genres, p_genre)) => @com.spotify.play(playable=id)
    #_[utterances=["i would like to hear some ${p_genre:const}",
                   "i would like to listen to ${p_genre:const} music",
                   "play ${p_genre:const} on spotify",
                   "on spotify play ${p_genre:const} music",
                   "play ${p_genre:const} music"]]
    ;

    program (p_song :String, p_playlist :String) := (@com.spotify.song(), id =~ p_song) => @com.spotify.add_song_to_playlist(song=id, playlist=p_playlist)
    #_[utterances=["add ${p_song:no-undefined} to ${p_playlist}",
                   "put ${p_song:no-undefined} in ${p_playlist}"]]
    ;

    program (p_playlist :String) := (@com.spotify.get_currently_playing()) => @com.spotify.add_song_to_playlist(song=song, playlist=p_playlist)
    #_[utterances=["add this song to ${p_playlist}",
                   "put this song in ${p_playlist}"]]
    ;

    action (p_state :Enum(on,off)) := @com.spotify.player_shuffle(shuffle=p_state)
    #_[utterances=["turn shuffle ${p_state}",
                   "turn ${p_state} shuffle"]]
    ;

    action := @com.spotify.player_shuffle(shuffle=enum(on))
    #_[utterances=["shuffle my spotify"]]
    ;

    action := @com.spotify.player_repeat(repeat=enum(track))
    #_[utterances=["repeat this song",
                   "turn on repeat"]]
    ;

    action := @com.spotify.player_repeat(repeat=enum(off))
    #_[utterances=["turn off repeat"]]
    ;

    action := @com.spotify.player_next()
    #_[utterances=["play the next song",
                   "skip this song",
                   "play the next episode",
                   "skip this episode"]]
    ;

    action := @com.spotify.player_previous()
    #_[utterances=["play the previous song",
                   "go back a song",
                   "play the previous episode",
                   "go back an episode"]]
    #[id=27924859]
    ;

    action := @com.spotify.player_play()
    #_[utterances=["continue playback",
                   "continue playing"]]
    ;

    action := @com.spotify.player_pause()
    #_[utterances=["pause playback",
                   "pause playing",
                   "stop playing",
                   "stop playback",
                   "stop the music"]]
    ;

    // TODO: use "action" here so we can combine with streams
    program (p_artist :Entity(com.spotify:artist)) :=
      @com.spotify.playable(), contains(artists, p_artist) => @com.spotify.play(playable=id)
    #_[utterances=["play ${p_artist:no-undefined}",
                   "play some ${p_artist:no-undefined}",
                   "play the artist ${p_artist:no-undefined}",
                   "i would like to hear ${p_artist:no-undefined}",
                   "i would like to listen to ${p_artist:no-undefined}",
                   "i would like to listen to the artist ${p_artist:no-undefined}"]]
    ;

    program (p_album :String, p_artist :Entity(com.spotify:artist)) :=
      @com.spotify.album(), id =~ p_album && contains(artists, p_artist) => @com.spotify.play(playable=id)
    #_[utterances=[/*"play ${p_album:no-undefined} by ${p_artist:no-undefined}",*/
                   "play the album ${p_album:no-undefined} by ${p_artist:no-undefined}",
                   "i would like to listen to the album ${p_album:no-undefined} by ${p_artist:no-undefined}",
                   "i would like to listen to the album ${p_album:no-undefined} from ${p_artist:no-undefined}"]]
    ;

    program (p_show :String) :=
      @com.spotify.show(), id =~ p_show => @com.spotify.play(playable=id)
    #_[utterances=["play the podcast ${p_show:no-undefined}", "play the show ${p_show:no-undefined}",
                   "i would like to listen to the show ${p_show:no-undefined}",
                   "i would like to listen to the podcast ${p_show:no-undefined}"]]
    ;


    stream := monitor (@com.spotify.get_user_top_tracks())
    #_[utterances=["when my top tracks changes",
                   "when I have new favorite songs"]]
    ;

    stream := monitor (@com.spotify.get_currently_playing())
    #_[utterances=["when a song is playing"]]
    ;

    program := @com.spotify.get_currently_playing()
    #_[utterances=["what song is playing?", "what music is playing?", "what is playing?", "what song is currently on?"]]
    ;
}
